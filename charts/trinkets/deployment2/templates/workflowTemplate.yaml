{{- $root := . }}
{{- if $root.Values.workflow.static.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: {{ $root.Values.name }}-{{ $root.Values.workflow.name }}-template
spec:
  activeDeadlineSeconds: 600 #espera 10 mins
  ttlStrategy:
    secondsAfterSuccess: 604800 #estos dos borran
    secondsAfterFailure: 604800 #7 dias ## TODO testear y si borra y eso
  entrypoint: clone-and-list
  serviceAccountName: {{ $root.Values.name }}-{{ $root.Values.seviceAccount.name }}-sensor
  arguments:
    parameters:
      - name: branch
        value: develop
      - name: repository
        value: landing
      - name: orgName
        value: the-yaml-life
      - name: commit
        value: hello world
      - name: eventType
        value: push
  templates:
    - name: clone-and-list
      serviceAccount: {{ $root.Values.name }}-{{ $root.Values.seviceAccount.name }}-sensor
      {{- range $containerName, $container  := $root.Values.workflow.containers }}
      {{- include "summon.common.volumes" $container | nindent 6}}
      {{- end}}
        - name: spell
          emptyDir:
            sizeLimit: 1Gi
        - name: definitions
          configMap:
            name: {{ $root.Values.name }}-definitions
      containerSet:
        serviceAccount: {{ $root.Values.name }}-{{ $root.Values.seviceAccount.name }}-sensor
        volumeMounts:
          - name: definitions
            mountPath: /definitions/fromCMap.yaml
          - name: spell
            mountPath: /spell
        containers:
        - name: clone-repo
          image: alpine/git
          command: [sh, -c] ## hay q agregar un cat al index del book y el chapter ## TODO aca hay un apk add --no-cache optimizacion
          args: ["git clone --depth 1 --branch {{  $root.Values.spellbook.revision }} https://git:$GH_TOKEN@{{ default "github.com" $root.Values.spellbook.gitUrl}}/{{ `{{workflow.parameters.orgName}}`}}/{{ $root.Values.spellbook.repository }}.git /spell/spellbook 
                  && apk add --no-cache yq grep 
                  && ls -l /spell/spellbook/bookrack/ 
                  && echo $(grep -Rl {{`{{workflow.parameters.repository}} /spell/spellbook/bookrack/*`}} )  
                  && cat $(grep -Rl {{`{{workflow.parameters.repository}} /spell/spellbook/bookrack/*`}} ) | tee /spell/spellFile.yaml |yq .name 
                  && git clone --depth 1 --branch $( echo \"{{`{{workflow.parameters.branch}}`}}\" | sed 's#refs/heads/##' ) https://git:$GH_TOKEN@{{ default "github.com" $root.Values.spellbook.gitUrl }}/{{`{{workflow.parameters.orgName}}`}}/{{`{{workflow.parameters.repository}}`}}.git /spell/spell
                  && ls -l /spell/spell
                "]
          env:
            - name: GH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: gh-token
                  key: ghGithub
        - name: container-build
          image: alpine:latest
          # command: [sh, -c]
          # args: ["sleep infinite"]
          command: [sh, -c]
          args: ["apk add --no-cache curl buildah yq netavark
                  && export spellName=$(cat /spell/spellFile.yaml |yq .name)
                  && echo $(cat /spell/spellFile.yaml |yq .name)
                  && export spellRegistry=$(cat /spell/spellFile.yaml |yq .image.repository)
                  && echo $(cat /spell/spellFile.yaml |yq .image.repository)
                  && export spellContainername=$(cat /spell/spellFile.yaml | yq '.containerFile // \"Dockerfile\"') 
                  && buildah login --username=$REGISTRY_USER --password=$REGISTRY_PASSWORD $spellRegistry
                  && echo 'loggeed'
                  && sed -i -e 's/\"overlay\"/\"vfs\"/g' /etc/containers/storage.conf
                  && cd /spell/spell && buildah build -f $spellContainername -t $spellRegistry/$spellName:latest -t $spellRegistry/$spellName:{{ `{{workflow.parameters.commit}} `}} 
                  && buildah push $spellRegistry/$spellName:latest docker://$spellRegistry/$spellName:latest
                  && buildah push $spellRegistry/$spellName:{{ `{{workflow.parameters.commit}} `}} docker://$spellRegistry/$spellName:{{ `{{workflow.parameters.commit}} `}}"]
          dependencies:
            - clone-repo
          securityContext:
            privileged: true
          env:
            - name: REGISTRY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-password
                  key: password
            - name: REGISTRY_USER
              value: deploy-unico
        - name: tests                  
          image: busybox
          command: [sh, -c]
          args: ["sleep 10 && ls /spell"]
          dependencies:
            - clone-repo
        - name: book-signing
          image: alpine/git
          env:
            - name: GH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: gh-token
                  key: ghGithub
          command: [sh, -c]
          args: ["apk add --no-cache yq grep 
                  && export spellName=$(cat /spell/spellFile.yaml |yq .name) 
                  && export spellRegistry=$(cat /spell/spellFile.yaml |yq .image.repository) 
                  && yq -i '.image.tag=\"{{ `{{workflow.parameters.commit}}` }}\"' $(grep -Rl {{`{{workflow.parameters.repository}} /spell/spellbook/bookrack/*`}} )
                  && git config --local user.email '{{ default "kaster@kast.ing" ($root.Values.workflow.git).mail }}' 
                  && git config --local user.name '{{ default "kaster" ($root.Values.workflow.git).user }}' 
                  && cd /spell/spellbook
                  && git add $(grep -Rl {{`{{workflow.parameters.repository}} /spell/spellbook/bookrack/*`}} ) 
                  && git commit -m '{{ default "automagic cd " ($root.Values.workflow.git).message }} $spellName {{ $root.Values.spellbook.revision }}' 
                  && git push "]
          dependencies:
            - container-build
            - tests

    - name: after-deploy-validations ## este es otro template q no se si ejecuta paralelo o hay q trigerear o serial
      volumes:
      - name: spell
        emptyDir:
          sizeLimit: 1Gi
      # - name: ssh-key-volume
      #   secret:
      #     secretName: kast01-ssh
      #     defaultMode: 0600
      containerSet:
        volumeMounts:
          - name: spell
            mountPath: /spell
        containers:
        - name: check-status-or-fail
          image: busybox
          command: [sh, -c]
          args: ["sleep 10 && echo 'debuging' && ls /spell"]
## agregar los acceos a la policy? como una funcion de addendum indexado?
## el runic indexer es la funcion de addendum indexado

{{- end }}
