{{- $root := . }}
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: {{ $root.Values.name }}-{{ $root.Values.workflow.name }}-template
spec:
  entrypoint: clone-and-list
  # arguments:
  #   parameters:
      # - name: branch
      #   value: hello world
      # - name: repo
      #   value: defaultLanding
      # - name: orgName
      #   value: the-yaml-life
      # - name: eventType
      #   value: push
  templates:
    - name: clone-and-list
      volumes:
      - name: repo-volume
        emptyDir:
          sizeLimit: 1Gi
      # - name: ssh-key-volume
      #   secret:
      #     secretName: kast01-ssh
      #     defaultMode: 0600
      containerSet:
        volumeMounts:
          - name: repo-volume
            mountPath: /repo
        containers:
        - name: clone-repo
          image: alpine/git
          env:
            - name: GH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github-token
                  key: gh_token
          command: [sh, -c]
          args: ["git clone --depth 1 --branch {{ $root.Values.spellbook.revision }} git:$GH_TOKEN@{{ default "github.com" $root.Values.spellbook.gitUrl}}:{{ `{{workflow.parameters.orgName}} `}}/{{ `{{workflow.parameters.spellbookRepo}} `}}.git /repo/spellbook && 
                  cat $(grep -R {{`{{workflow.parameters.repo}}`}}) | tee /repo/spellFile.yaml |yq .name
                  ## hay q agregar un cat al index del book y el chapter
                  git clone --depth 1 --branch {{`{{workflow.parameters.revision}}`}} git:$GH_TOKEN@{{ default "github.com" $root.Values.spellbook.gitUrl }}:{{`{{workflow.parameters.orgName}}`}}/{{`{{workflow.parameters.repo}}`}}.git /repo &&
                  
                "]
        - name: container-build
          image: noenv/buildah
          command: [sh, -c]
          args: ["buildah login --username=oauth2accesstoken --password=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) $spellRegistry &&
                  export spellName=$(cat /repo/spellFile.yaml |yq .name) &&
                  export spellRegistry=$(cat /repo/spellFile.yaml |yq .image.repository) &&
                  export spellContainername=$(cat /repo/spellFile.yaml | yq '.containerFile // \"Dockerfile\"') && 
                  cd /repo && buildah build -f $spellContainername -t $spellRegistry/$spellName:latest -t $spellRegistry/$spellName:{{ `{{workflow.parameters.revision}} `}}  &&
                  buildah push $spellRegistry/$spellName:latest docker://$spellRegistry/$spellName:latest &&
                  buildah push $spellRegistry/$spellName:{{ `{{workflow.parameters.revision}} `}} docker://$spellRegistry/$spellName:{{ `{{workflow.parameters.revision}} `}}"]
          dependencies:
            - clone-repo
        - name: tests
          image: busybox
          command: [sh, -c]
          args: ["sleep 10 && ls /repo"]
          dependencies:
            - clone-repo
        - name: book-signing
          image: dellnoantechnp/git-yq
          env:
            - name: GH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github-token
                  key: gh_token
          command: [sh, -c]
          args: ["export spellName=$(cat /repo/spellFile.yaml |yq .name) &&
                  export spellRegistry=$(cat /repo/spellFile.yaml |yq .image.repository) &&
                  cat $(grep -R {{`{{workflow.parameters.repo}}`}}) | yq -i '.image.tag=\"{{ `{{workflow.parameters.revision}} `}}\"'
                  git config --local user.email '{{ default "kaster@kast.ing" ($root.Values.workflow.git).mail }}' &&
                  git config --local user.name '{{ default "kaster" ($root.Values.workflow.git).user }}' &&
                  git add $(grep -R {{`{{workflow.parameters.repo}}`}}) &&
                  ## TODO se puede hacer algo con ia... u know
                  git commit -m '{{ default "automagic cd " ($root.Values.workflow.git).message }} {{ `{{workflow.parameters.spellName}} `}} {{ $root.Values.spellbook.revision }}' &&
                  git push "]
          dependencies:
            - container-build
            - tests

    - name: after-deploy-validations
      volumes:
      - name: repo-volume
        emptyDir:
          sizeLimit: 1Gi
      # - name: ssh-key-volume
      #   secret:
      #     secretName: kast01-ssh
      #     defaultMode: 0600
      containerSet:
        volumeMounts:
          - name: repo-volume
            mountPath: /repo
        containers:
        - name: check-status-or-fail
          image: busybox
          command: [sh, -c]
          args: ["sleep 10 && ls /repo"]
