




name: pepe
eventBusName: magic-bus
eventBusreplicaCount: 1
sensor:
  enabld: false

rbac:
  enabled: true
parameters:
  - name: branch
    value: hello world
  - name: gitURL
    value: git@github.com
  - name: orgName
    value: kast-spells
  - name: repo
    value: ACAA
  - name: containerFileName
    value: Containerfile
  - name: spellbook
    value: summon2
  - name: spellbookRepo
    value: spellbooks-library
  - name: spellbookBranch
    value: master
  - name: chapterName
    value: testing
  - name: spellName
    value: ms-default-landing



sentence:
  enabled: true
  volumes:
    data:
      type: pvc
      destinationPath: /data
      create: true
      storageClass: lala
      size: sor
  cantrips:
    isContainer:
      image: 
        name: alpine # es el default
    canHaveAVerb:
      verbs: clone-repo #is a predefined container with an simple task like clone the repo in the pod
      values:
        secrets:
          git-key:
            path:
    # ownVolume:
    #   volumes:
    #     data:
    #       type: emptyDir
    #       destinationPath: /data
    curses:
      dependancies: #they can have dependancies to set complex of the cantrip sentence
        - canHaveAVerb
      image:
        name: busybox #or have full custom container configuration
      command: [sh, -c]
      args: ["sleep 10 && ls /repo"]
      probes: {}
      resources:
        limits:
          cpu: "10m"
          memory: "20M"
        requests:
          cpu: "10m"
          memory: "10M"

serviceAccount:
  # Specifies whether a service account should be created
  enabled: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
    # pepe: sarasa
    # algo: aca
  labels: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

secrets: {}
configMaps: {}
  # saras2:
  #   type: file
  #   mountPath: /defaults.yaml
  # saras:
  #   location: local
  #   type: env
  # pepe:
  #   location: local
  #   type: env
  #   name: roberto
  # jorge:
  #   location: create
  #   type: file
  #   name: jorge.conf
  #   mountPath: /sarlanga
  #   contentType: json
  #   content:
  #     {
  #       "UTC": "Tiempo Universal Coordinado",
  #       "GMT": "Tiempo Medio de Greenwich",
  #       "CET": "Hora de Europa Central",
  #       "EET": "Hora de Europa del Este",
  #       "AST": "Hora Estándar del Atlántico",
  #       "EST": "Hora Estándar del Este de América del Norte",
  #       "EDT": "Hora de Verano del Este de América del Norte",
  #       "CST": "Hora Estándar del Centro de América del Norte",
  #     }
  # mambru.notrock:
  #     location: create
  #     type: file
  #     mountPath: /mambru.conf
  #     content: |
  #       sarasa co
  # deeppurple.rock:
  #     location: create
  #     type: file
  #     mountPath: /mambru.conf
  #     contentType: yaml
  #     content:
  #       UTC: "Tiempo Universal Coordinado"
  #       GMT: "Tiempo Medio de Greenwich"
  #       CET: "Hora de Europa Central"
  #       EET: "Hora de Europa del Este"
  #       AST: "Hora Estándar del Atlántico"

##esto genera dinamicamente un pvc ademas de agregar el volumen al pod
# volumes:
#   home:
#     type: hostPath
#     destinationPath: /home/namen/_home
#     path: /home/namen/_home
#   data:
#     type: pvc
#     destinationPath: /data
#     create: true
#     storageClass: lala
#     size: sor
#     pvcName: kara #optional si no existe toma el nombre de la ms-name-$key
#   laslreaeraw:
#     destinationPath: /laslreaeraw
#     create: true
#   dataLoca:
#     destinationPath: /data
#     pvcName: jorge # optional si no existe toma la key
#     create: false
#     readOnly: true
#   nfs:
#     destinationPath: /data
#     nfs: 
#       server: my-nfs-server.example.com
#       path: /my-nfs-volume
#       readOnly: true
#   lala:
#     emptyDir: true
#     destination: /lala
#   otro:
#     emptyDir:
#       sizeLimit: 50Mi
#       medium: memory

# envs:
#   JORGE: sarasa
#   DB_USER:
#     type: secret
#     name: saladenga
#     key: kaka
#   lala: pep
















# el glyphs es inopinado
# el trinket es opinado
# el spell es una suma de todo #q como base puede ser summon como trinket o un external repo
# la runa son external repos


book:
  labels:
    spellbook: name
    environment: control-plane
chapters:
  base-system:
    type: chapters
    labels:
      default: book

lexicon:
  certManager: 
    defaultIssuer:
      type: clusterIssuer
      labels:
        default: book
      email: devops@tarjetasperuanas.com.pe
      issuerType: gcp
      gcp:
        projectID: "@gcpProject.labels.projectID" #apunta al valor de un label haciendo get($key."labels".$value)

    zeroIsuer:
      type: zerossl-clusterIssuer
      namespaced: true # namespaced issuer
      labels:
        provider: zerossl
      issuerType: zerossl
      fileRef: base-system/zerossl.yaml
  istio:
    internal:
      type: istio-ingressgateway
      labels:
        default: book
      name: pepe
      hostedZone:
        hosts:
          - int.fwck.com.ar
          - "*.int.fwck.com.ar"
    external:
      type: istio-ingressgateway
      labels:
        default: book
      hostedZone:
        type: hostedZone
        labels:
          access: public
        hosts:
          - fwck.com.ar
      tls:
        certificate:
          issuer:
            selector:
              provider: zerossl
  gcp:
    control-plane:
      type: gcpProject
      fileRef: base-system/control-plane.yaml ## optional mergea el contenido con lo definido en la entrada
      #implica q todo esto de abajo se puede ir a ese file o mega complicarlo de ese lado
      labels:
        projectID: "@book.labels.environment"
        defaultRegion: us-east5
        defaultZone: us-east5a
        default: book
      userManagent:
        type: userManagment
        fileRef: security/users.yaml
    control-plane-vpc:
      name: control-plane
      type: vpc
      labels:
        default: book
      subnets:
        private:
          type: subnet
          cidr: 10.42.0.0/24
          labels:
            access: private
            default: book
        public:
          type: subnet
          access: public
          cidr: 10.42.2.0/24
          labels:
            access: public
        otraZona:
          type: subnet
          cidr: 10.42.1.0/24
          location: us-east5b
          labels:
            usedFor: integration
            client: brando
      clusters:
        type: gke
        fileRef: base-system/control-plane-cluster.yaml
        labels:
          default: book
        nodes:
          basics:
            type: gke-node
            machineType: t2.micro
            subnetsRef:
              path: control-plane.network.subnet.private
      vms:
        bastion:
          type: vm
          access: public
          configuration: netbird
          subdomain: bastion
          sudomaiDocument: select * where type=hostedzone and access=public
          ports:
            - port: 22
              access: 0.0.0.0/0
        jenkins-slave:
          type: vm
          configuration: jenkins-slave #este puede tener manejo de recusos y conf extra como sus propias reglas de fw
          subdomain: jk-slaves
          sudomaiDocument: select * where type=hostedzone and default=book
    